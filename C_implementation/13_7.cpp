#include "dprfb.h"
#include "13_7.h"

void _13_7::even_analyze(int n, int s[], int l[], int h[]) throw() {
  int i;
  h[0] = s[1] - s[0];
  
  if(n>2) {
    for(i=1;i<n/2-2;i++) {
      int i2 = i<<1;
      h[i] = s[i2+1] - ((9*(s[i2]+s[i2+2]) - (s[i2-2]+s[i2+4])+8)>>4);
    }
    h[n/2-2] = s[n-3] - ((s[n-4]+s[n-2]+1)>>1);
    h[n/2-1] = s[n-1] - s[n-2];
  }
  
  l[0] = s[0] + ((h[0])>>1);
  
  if(n>2) {
    l[1] = s[2] + ((h[0]+h[1]+1)>>2);
    for(i=2; i<n/2-1; i++) {
      int i2 = i<<1;
      l[i] = s[i2] + ((-h[i-2]+9*(h[i-1]+h[i])-h[i+1]+16)>>5);
    }
    l[n/2-1] = s[n-2] + ((h[n/2-2]+h[n/2-1]+1)>>2);
  }
}

void _13_7::odd_analyze(int n, int s[], int l[], int h[]) throw() {
  int i;
  h[0] = s[1] - ((s[0]+s[2]+1)>>1);
  for(i=1;i<n/2-1;i++) {
    int i2 = i<<1;
    h[i] = s[i2+1] - ((9*(s[i2]+s[i2+2]) - (s[i2-2]+s[i2+4])+8)>>4);
  }
  h[n/2-1] = s[n-2] - ((s[n-3]+s[n-1]+1)>>1);

  l[0] = s[0] + (h[0]>>1);
  l[1] = s[2] + ((h[0]+h[1]+1)>>2);

  for(i=2; i<n/2-1; i++) {
    int i2 = i<<1;
    l[i] = s[i2] + ((-h[i-2]+9*(h[i-1]+h[i])-h[i+1]+16)>>5);
  }
  l[n/2-1] = s[n-3] + ((h[n/2-2]+h[n/2-1]+1)>>2);
  l[n/2] = s[n-1] + (h[n/2-1]>>1);
}

void _13_7::even_synthesize(int n, int s[], int l[], int h[]) throw() {
  int i;
  s[0] = l[0] - ((h[0])>>1);

  if(n>2) {
    s[2] = l[1] - ((h[0]+h[1]+1)>>2);
    for(i=2; i<n/2-1; i++) {
      int i2 = i<<1;
      s[i2] = l[i] - ((-h[i-2]+9*(h[i-1]+h[i])-h[i+1]+16)>>5);
    }
    s[n-2] = l[n/2-1] - ((h[n/2-2]+h[n/2-1]+1)>>2);
  }

  s[1] = h[0] + s[0];
  if(n>2) {
    for(i=1;i<n/2-2;i++) {
      int i2 = i<<1;
      s[i2+1] = h[i] + ((9*(s[i2]+s[i2+2]) - (s[i2-2]+s[i2+4])+8)>>4);
    }
    s[n-3] = h[n/2-2] + ((s[n-4]+s[n-2]+1)>>1);
    s[n-1] = h[n/2-1] + s[n-2];
  }
}

void _13_7::odd_synthesize(int n, int s[], int l[], int h[]) throw() {
  int i;
  s[0] = l[0] - (h[0]>>1);
  s[2] = l[1] - ((h[0]+h[1]+1)>>2);
   
  for(i=2; i<n/2-1; i++) {
    int i2 = i<<1;
    s[i2] = l[i] - ((-h[i-2]+9*(h[i-1]+h[i])-h[i+1]+16)>>5);
  }
  s[n-3] = l[n/2-1] - ((h[n/2-2]+h[n/2-1]+1)>>2);
  s[n-1] = l[n/2] - (h[n/2-1]>>1);

  s[1] = h[0] + ((s[0]+s[2]+1)>>1);
  for(i=1;i<n/2-1;i++) {
    int i2 = i<<1;
    s[i2+1] = h[i] + ((9*(s[i2]+s[i2+2]) - (s[i2-2]+s[i2+4])+8)>>4);
  }
  s[n-2] = h[n/2-1] + ((s[n-3]+s[n-1]+1)>>1);
}
